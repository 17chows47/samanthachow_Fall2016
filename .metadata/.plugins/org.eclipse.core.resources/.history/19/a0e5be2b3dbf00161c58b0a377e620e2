/* Samantha Chow
 * 11/21/16
 * APCS1
 * FracCalc
 * 
 * FracCalc parses the first and second operand of multiple lines of input, until the user enters 'quit', 
 * and returns the parsed operand 2 to the screen.
 * The parts are 'whole:', 'numerator:', and 'denominator'. 
 * 
 */


package fracCalc;
import java.util.Scanner;

public class FracCalc {

    public static void main(String[] args){
        Scanner userInput = new Scanner(System.in);
        System.out.println("Enter in a statement to calculate: ");
        String statement = userInput.nextLine();

        while (!(statement.equals("quit"))){
        	System.out.println(produceAnswer(statement));
    		System.out.println("Enter in a statement to calculate: ");
        	statement = userInput.nextLine();        	
        }

    }
    public static String produceAnswer(String statement){ 
        String firstPart = "";
        String operator = "";
        String secondPart = "";
        String [] frac = statement.split(" ");
        firstPart = frac[0];
        operator = frac[1];
        secondPart = frac[2];
	
    	//parsed operand 2
        int oneWholeNum = 0;
    	int oneNumerator = 0;
    	int oneDenom = 0;    	
    	int twoWholeNum = 0;
    	int twoNumerator = 0;
    	int twoDenom = 0;
    	//whole number
    	if(!(secondPart.indexOf("/") > 0) && !(secondPart.indexOf("_") > 0)){
    		twoWholeNum = Integer.parseInt(secondPart);
    		twoNumerator = 0;
    		twoDenom = 1;
    	//fraction
    	}else if(!(secondPart.indexOf("_") > 0) && (secondPart.indexOf("/") > 0 )){
    		twoWholeNum = 0;
    		twoNumerator = Integer.parseInt(secondPart.substring(0, secondPart.indexOf("/")));
    		twoDenom = Integer.parseInt(secondPart.substring(secondPart.indexOf("/") + 1));
    	//mixed num
    	}else if((secondPart.indexOf("_") > 0) && (secondPart.indexOf("/") > 0)){
    		twoWholeNum = Integer.parseInt(secondPart.substring(0, secondPart.indexOf("_")));
    		twoNumerator = Integer.parseInt(secondPart.substring(secondPart.indexOf("_") + 1, secondPart.indexOf("/")));
    		twoDenom = Integer.parseInt(secondPart.substring(secondPart.indexOf("/") + 1));
    	}
		
		
    	//parsed operand 1
    	//whole number
    	if(!(firstPart.indexOf("/") > 0) && !(firstPart.indexOf("_") > 0)){
    		oneWholeNum = Integer.parseInt(firstPart);
    		oneNumerator = 0;
			oneDenom = 1;
    	//fraction
    	}else if(!(firstPart.indexOf("_") > 0) && (firstPart.indexOf("/") > 0)){
			oneWholeNum = 0;
			oneNumerator = Integer.parseInt(firstPart.substring(0, firstPart.indexOf("/")));
			oneDenom = Integer.parseInt(firstPart.substring(firstPart.indexOf("/") + 1));
		//mixed num
    	}else if((firstPart.indexOf("_") > 0) && (firstPart.indexOf("/") > 0)) {
			oneWholeNum = Integer.parseInt(firstPart.substring(0,firstPart.indexOf("_")));
			oneNumerator = Integer.parseInt(firstPart.substring(firstPart.indexOf("_") + 1, firstPart.indexOf("/")));
			oneDenom = Integer.parseInt(firstPart.substring(firstPart.indexOf("/") + 1));
		}
    	
    	String oneImproper = toImproperFrac(oneWholeNum, oneNumerator, oneDenom);
    	String twoImproper = toImproperFrac(twoWholeNum, twoNumerator, twoDenom);
    	
    	
    	return simplifyAnswer(calcFrac(oneImproper, operator, twoImproper));
    }
    
    public static String calcFrac(String improper1, String operator, String improper2){
    	
    	String [] parsed1 = improper1.split("/");
        int numerator1 = Integer.parseInt(parsed1[0]);
        int denom1 = Integer.parseInt(parsed1[1]);
    	
        String [] parsed2 = improper2.split("/");
        int numerator2 = Integer.parseInt(parsed2[0]);
        int denom2 = Integer.parseInt(parsed2[1]);
        
        String answer = ""; 
        
    	if(operator.equals("*")){
    		answer = multiplyNums(numerator1, denom1, numerator2, denom2);
    	}else if(operator.equals("/")){
    		answer = divideNums(numerator1, denom1, numerator2, denom2);
    	}else if(operator.equals("+") || operator.equals("-")){
    		answer = addOrSubtractNums(operator, numerator1, denom1, numerator2, denom2);
    	}
    	return answer;
    }
    
    public static String multiplyNums(int numerator1, int denominator1, int numerator2, int denominator2){
    	int finalNumerator = numerator1*numerator2;
    	int finalDenom = denominator1*denominator2;
    	
    	return finalNumerator + "/" + finalDenom;
    }
    
    public static String divideNums(int numerator1, int denominator1, int numerator2, int denominator2){
    	int finalNumerator = numerator1*denominator2;
    	int finalDenom = denominator1*numerator2;
    	
    	return finalNumerator + "/" + finalDenom;
    }
    
    public static String addOrSubtractNums(String operator, int numerator1, int denominator1, int numerator2, int denominator2){
    	int finalNumerator;
    	int finalDenom = denominator1;
    	int multiplier1;
    	int multiplier2;
    	
    	if (denominator1 == denominator2){
    		if(operator.equals("+")){
    			finalNumerator = numerator1 + numerator2;
    		}else{
    			finalNumerator = numerator1 - numerator2;
    		}
    	}else{
    		finalDenom = denominator1 * denominator2;
    		multiplier1 = finalDenom / denominator1;
    		numerator1 *= multiplier1;
    		multiplier2 = finalDenom / denominator2;
    		numerator2 *= multiplier2;
    		if(operator.equals("+")){
    			finalNumerator = numerator1 + numerator2;
    		}else{
    			finalNumerator = numerator1 - numerator2;
    		}
    	}
    	return finalNumerator + "/" + finalDenom;
    }    
    
//Accepts three integers and converts it into an improper fraction as a String. 
	public static String toImproperFrac(int wholeNum, int numerator, int denominator){
		int improperNumerator;

		if(denominator == 0){
			throw new IllegalArgumentException("Denominator cannot be 0.");
		}else{
			if(wholeNum < 0 ^ denominator < 0 ){
				improperNumerator = (wholeNum*denominator) - numerator;
			}else{
				improperNumerator = (wholeNum*denominator) + numerator;
			}
			System.out.println(improperNumerator + "  /  " + denominator);

			return improperNumerator + "/" + denominator;
		}
	}
	
	public static String simplifyAnswer(String answer){
		String finalAnswer = "";
		
		String [] frac = answer.split("/");
        int numerator = Integer.parseInt(frac[0]);
        int denominator = Integer.parseInt(frac[1]);
        
        finalAnswer = toMixedNum(numerator, denominator);
        
        if(finalAnswer.indexOf("0_") == 0){
        	finalAnswer = (finalAnswer.substring(finalAnswer.indexOf("_") + 1));
        }
        return finalAnswer;
	}
	
	//Accepts two integers and converts it into a mixed number as a String. 
	public static String toMixedNum(int numerator, int denominator){
		if(denominator == 0){
			throw new IllegalArgumentException("Denominator cannot be 0.");
		}else{
			int wholeNum = numerator / denominator;
			int xModY = numerator % denominator;
			xModY = absValue(xModY);
			denominator = absValue(denominator);
			if (xModY == 0){
				return wholeNum + "";
			}else{
				for(int i = 2; i <= denominator; i++){
					while(xModY % i == 0 && denominator % i == 0){
						xModY = xModY / i;
						denominator = denominator / i;
					}
				}
				return wholeNum + "_" + xModY + "/" + denominator;
			}
		}
	}
	
	//Accepts a double and returns the absolute value of the number as a double. 
		public static int absValue(int num){
			if (num > 0){
				return num;
			}else{
				return -(num);
			}
		}
}
