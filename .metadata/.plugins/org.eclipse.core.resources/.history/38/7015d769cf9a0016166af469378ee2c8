import java.util.Arrays;

public class Split 
{

	public static void main(String[] args) 
	{
		String phrase = "The best cookies in the world are cookies made in the oven";
		String find = "cookies";
		System.out.println(Arrays.toString(phrase.split(find)));
		System.out.println(Arrays.toString("I like apples!".split(" ")));
		System.out.println(Arrays.toString("I really like really red apples".split("really")));
		System.out.println(Arrays.toString("I reallyreally like apples!".split(" really")));
		
		//String.split();
		//It's a method that acts on a string, <StringName>.split(<String sp>);
		//Where sp is the string where the string splits
		//And it returns an array
		// Example: "I like apples!".split(" "); 
		//		it will split at spaces and return an array of ["I","like","apples!"]
		// Example 2: "I really like really red apples"split("really")
		//		it will split at the word "really" and return an array of ["I "," like "," apples!"]
		
		//play around with String.split! what happens if you "I reallyreally like apples".split("really") ?
		
		
		//Your task:
		/*Write a method that take in a string like "applespineapplesbreadlettustomatobaconmayohambreadcheese" describing a sandwich
		 * use String.split to split up the sandwich by the word "bread" and return what's in the middle of the sandwich and ignores what's on the outside
		 * What if it's a fancy sandwich with multiple pieces of bread?
		*/
		
		// dont use split if bread doesnt appear more than once. find keyword bread
		// before bread? after bread?
		/* x bread NOT  ; 1 bread 0 bread
		 * bread NOT
		 * x NOT
		 * bread x NOT
		 * bread x bread = X
		 * x bread y NOT
		 * bread bread x NOT ; nothing in between
		 * bread bread NOT
		 * x bread y bread z = Y
		 * x bread y bread =  Y
		 * 
		 * if test more than one bread
		 *  else if true test if anything inside bread 
		 *  else test whats inside
		 */
		//breadcheesecheesetomatotomatotomatochickenhummusbread
		
//		public static void insideBread(String sandwich, String bread){
//			if(findKeyword((String sandwich, String bread) > = 2){
//				if(Arrays.toString(sandwhich.split(bread))> 0 )
//			}
//		}
//		
//		private int findKeyword(String statement, String goal) {
//			return findKeyword(statement, goal, 0);
//		}
//		
//		private int findKeyword(String statement, String goal, int startPos) {
//			String phrase = statement.trim();
//			// The only change to incorporate the startPos is in the line below
//			int psn = phrase.toLowerCase().indexOf(goal.toLowerCase(), startPos);
//
//			// Refinement--make sure the goal isn't part of a word
//			while (psn >= 0) {
//				// Find the string of length 1 before and after the word
//				String before = " ", after = " ";
//				if (psn > 0) {
//					before = phrase.substring(psn - 1, psn).toLowerCase();
//				}
//				if (psn + goal.length() < phrase.length()) {
//					after = phrase.substring(psn + goal.length(),
//							psn + goal.length() + 1).toLowerCase();
//				}
//
//				// If before and after aren't letters, we've found the word
//				if (before.equals(" ") && after.equals(" ")) {
//					return psn;
//				}
//				// The last position didn't work, so let's find the next, if there
//				// is one.
//				psn = phrase.indexOf(goal.toLowerCase(), psn + 1);
//			}
//
//			return -1;
//		}
		
		
		
		//Your task pt 2:
		/*Write a method that take in a string like "apples pineapples bread lettus tomato bacon mayo ham bread cheese" describing a sandwich
		 * use String.split to split up the sandwich at the spaces, " ", and return what's in the middle of the sandwich and ignores what's on the outside
		 * Again, what if it's a fancy sandwich with multiple pieces of bread?
		*/

		

	}

}

