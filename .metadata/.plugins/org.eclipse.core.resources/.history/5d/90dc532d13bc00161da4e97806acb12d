/* Samantha Chow
 * 11/21/16
 * APCS1
 * FracCalc
 * 
 * FracCalc parses the first and second operand of multiple lines of input, until the user enters 'quit', 
 * and returns the parsed operand 2 to the screen.
 * The parts are 'whole:', 'numerator:', and 'denominator'. 
 * 
 */


package fracCalc;
import java.util.Scanner;
public class FracCalc {

    public static void main(String[] args){
        Scanner userInput = new Scanner(System.in);
        System.out.println("Enter in a statement to calculate: ");
        String statement = userInput.nextLine();

        while (!(statement.equals("quit"))){
        	System.out.println(produceAnswer(statement));
    		System.out.println("Enter in a statement to calculate: ");
        	statement = userInput.nextLine();        	
        }

    }
    public static String produceAnswer(String statement){ 
        String firstPart = "";
        String operator = "";
        String secondPart = "";
        String [] frac = statement.split(" ");
        firstPart = frac[0];
        operator = frac[1];
        secondPart = frac[2];
	
    	//parsed operand 2
        int oneWholeNum = 0;
    	int oneNumerator = 0;
    	int oneDenom = 0;
    	
    	int twoWholeNum = 0;
    	int twoNumerator = 0;
    	int twoDenom = 0;
    	//whole number
    	if(!(secondPart.indexOf("/") > 0) && !(secondPart.indexOf("_") > 0)){
    		twoWholeNum = Integer.parseInt(secondPart);
    		twoNumerator = 0;
    		twoDenom = 1;
    	}else if(!(secondPart.indexOf("_") > 0) && (secondPart.indexOf("/") > 0 )){
    		twoWholeNum = 0;
    		twoNumerator = Integer.parseInt(secondPart.substring(0, secondPart.indexOf("/")));
    		twoDenom = Integer.parseInt(secondPart.substring(secondPart.indexOf("/") + 1));
    	}else if((secondPart.indexOf("_") > 0) && (secondPart.indexOf("/") > 0)){
    		twoWholeNum = Integer.parseInt(secondPart.substring(0, secondPart.indexOf("_")));
    		twoNumerator = Integer.parseInt(secondPart.substring(secondPart.indexOf("_") + 1, secondPart.indexOf("/")));
    		twoDenom = Integer.parseInt(secondPart.substring(secondPart.indexOf("/") + 1));
    	}
		
		
    	//parsed operand 1
		
    	//whole number
    	if(!(firstPart.indexOf("/") > 0) && !(firstPart.indexOf("_") > 0)){
    		oneWholeNum = Integer.parseInt(firstPart);
    		oneNumerator = 0;
			oneDenom = 1;
    	}
    	//fraction
    	else if(!(firstPart.indexOf("_") > 0) && (firstPart.indexOf("/") > 0)){
			oneWholeNum = 0;
			oneNumerator = Integer.parseInt(firstPart.substring(0, firstPart.indexOf("/")));
			oneDenom = Integer.parseInt(firstPart.substring(firstPart.indexOf("/") + 1));
		}
		//mixed fraction
		else if((firstPart.indexOf("_") > 0) && (firstPart.indexOf("/") > 0)) {
			oneWholeNum = Integer.parseInt(firstPart.substring(0,firstPart.indexOf("_")));
			oneNumerator = Integer.parseInt(firstPart.substring(firstPart.indexOf("_") + 1, firstPart.indexOf("/")));
			oneDenom = Integer.parseInt(firstPart.substring(firstPart.indexOf("/") + 1));
		}
    	
    	System.out.println(toImproperFrac(oneWholeNum, oneNumerator, oneDenom));
    	System.out.println(toImproperFrac(twoWholeNum, twoNumerator, twoDenom));
		
    	return "whole:" + twoWholeNum + " numerator:" + twoNumerator + " denominator:" + twoDenom;
    	
    }  

//Accepts three integers and converts it into an improper fraction as a String. 
	public static String toImproperFrac(int wholeNum, int numerator, int denominator){
		if(denominator == 0){
			throw new IllegalArgumentException("Denominator cannot be 0.");
		}else{
			int improperNumerator = (wholeNum*denominator) + numerator;
			return improperNumerator + "/" + denominator;
		}
	}
	//Accepts two integers and converts it into a mixed number as a String. 
	public static String toMixedNum(int numerator, int denominator){
		if(denominator == 0){
			throw new IllegalArgumentException("Denominator cannot be 0.");
		}else{
			int wholeNum;
			wholeNum = numerator / denominator;
			int xModY = numerator % denominator;
			if (xModY == 0){
				return wholeNum + " ";
			}else{
				return wholeNum + "_" + xModY + "/" + denominator;
			}
		}
	}

}
